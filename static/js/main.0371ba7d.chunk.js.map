{"version":3,"sources":["component/Weather.js","component/Form.js","App.js","serviceWorker.js","index.js"],"names":["Weather","props","className","country","humidity","coord","temp","description","error","Form","onSubmit","getWeather","type","name","placeholder","App","state","e","a","preventDefault","city","target","elements","value","fetch","api","json","data","console","log","main","setState","sys","lon","lat","weather","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"iQAkBeA,EAhBC,SAACC,GAET,OACA,yBAAKC,UAAU,QACbD,EAAME,SAAW,uBAAGD,UAAU,OAAb,IAAoB,0BAAMA,UAAU,OAAhB,eAAmCD,EAAME,QAAzC,KAApB,KAChBF,EAAMG,UAAa,uBAAGF,UAAU,OAAb,IAAoB,0BAAMA,UAAU,OAAhB,cAAmCD,EAAMG,WACjFH,EAAMI,OAAS,uBAAGH,UAAU,OAAb,IAAoB,0BAAMA,UAAU,OAAhB,YAAgCD,EAAMI,QACxEJ,EAAMK,MAAQ,uBAAGJ,UAAU,OAAb,IAAoB,0BAAMA,UAAU,OAAhB,YAAgCD,EAAMK,OACzEL,EAAMM,aAAgB,uBAAGL,UAAU,OAAb,IAAoB,0BAAMA,UAAU,OAAhB,mBAAuCD,EAAMM,YAA7C,MAC1CN,EAAMO,OAAU,uBAAGN,UAAU,OAAb,IAAoB,0BAAMA,UAAU,OAAhB,KAAyBD,EAAMO,MAA/B,QCE/BC,EAZF,SAACR,GAEN,OACA,0BAAMS,SAAUT,EAAMU,YACf,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,SAC3C,2BAAOF,KAAK,OAAOC,KAAK,UAAUC,YAAY,YAC9C,iDC0DAC,G,kNA1DbC,MAAQ,CACLb,QAAS,GACTE,MAAQ,GACRC,KAAO,GACPF,SAAW,GACXG,YAAc,GACdC,MAAQ,I,EAEXG,W,uCAAa,WAAOM,GAAP,qBAAAC,EAAA,6DAEbD,EAAEE,iBACIC,EAAOH,EAAEI,OAAOC,SAASF,KAAKG,MAC9BpB,EAAUc,EAAEI,OAAOC,SAASnB,QAAQoB,MAC9B,mCALC,SAMKC,MAAM,qDAAD,OAAsDJ,EAAtD,YAA8DjB,EAA9D,kBADX,qCALC,cAMPsB,EANO,gBAOOA,EAAIC,OAPX,OAONC,EAPM,OAQZC,QAAQC,IAAIF,GACTP,GAAQjB,GAAWwB,EAAKG,KAC3B,EAAKC,SAAS,CAET3B,SAAWuB,EAAKG,KAAK1B,SACrBD,QAASwB,EAAKK,IAAI7B,QAClBE,MAAQsB,EAAKtB,MAAM4B,IAAK,IAAKN,EAAKtB,MAAM6B,IACxC5B,KAAOqB,EAAKG,KAAKxB,KACjBC,YAAcoB,EAAKQ,QAAQ,GAAG5B,YAC9BC,MAAQ,KAIZ,EAAKuB,SAAS,CACZ3B,SAAU,GACVD,QAAS,GACTE,MAAQ,GACRC,KAAO,GACPC,YAAc,GACdC,MAAQ,wBA3BC,4C,6GAiCb,OACE,yBAAKN,UAAU,WACb,yBAAKA,UAAU,QACf,kBAAC,EAAD,CAAMS,WAAYyB,KAAKzB,aACvB,kBAAC,EAAD,CACCP,SAAUgC,KAAKpB,MAAMZ,SACrBD,QAASiC,KAAKpB,MAAMb,QACpBE,MAAO+B,KAAKpB,MAAMX,MAClBC,KAAM8B,KAAKpB,MAAMV,KACjBC,YAAa6B,KAAKpB,MAAMT,YACxBC,MAAO4B,KAAKpB,MAAMR,c,GArDP6B,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA9C,GACLoB,QAAQpB,MAAMA,EAAM+C,a","file":"static/js/main.0371ba7d.chunk.js","sourcesContent":["import React  from 'react';\r\n\r\nconst Weather = (props) =>  {\r\n    \r\n        return (\r\n        <div className=\"info\"> \r\n         {props.country && <p className=\"key\"> <span className=\"val\">country :   {props.country} </span> </p> }\r\n         { props.humidity &&  <p className=\"key\"> <span className=\"val\">humidity:  { props.humidity }</span></p>}\r\n         {props.coord && <p className=\"key\"> <span className=\"val\">coord:   {props.coord}</span></p>}\r\n         { props.temp && <p className=\"key\"> <span className=\"val\"> temp:   {props.temp}</span></p>}\r\n         {props.description &&  <p className=\"key\"> <span className=\"val\"> description:   {props.description} </span></p> }\r\n         {props.error &&  <p className=\"key\"> <span className=\"val\">  {props.error} </span></p> }\r\n         \r\n        </div>\r\n        );\r\n    \r\n}\r\n \r\nexport default Weather;","import React from 'react';\r\nconst Form = (props) => { \r\n    \r\n        return ( \r\n        <form onSubmit={props.getWeather}>\r\n               <input type=\"text\" name=\"city\" placeholder=\"city\" />\r\n               <input type=\"text\" name=\"country\" placeholder=\"country\" />\r\n               <button>get weather</button>\r\n        </form>\r\n        );\r\n   \r\n}\r\n \r\nexport default Form;","import React , {Component} from 'react';\nimport Weather from './component/Weather'\nimport Form from './component/Form'\nimport './App.css';\n \nclass App extends Component {\n  \n  state = {\n     country: '',\n     coord : '',\n     temp : '',\n     humidity : '',\n     description : '',\n     error : '',\n  }\n  getWeather = async (e) => {\n    \n  e.preventDefault()\n  const city = e.target.elements.city.value\n  const country = e.target.elements.country.value\n  const key = \"8b71b7c4f012a495b4b36591590f9db2\"\n  const api = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${key}`)\n   const data = await api.json()\n   console.log(data)\n   if(city && country && data.main){\n   this.setState({\n     \n        humidity : data.main.humidity ,\n        country: data.sys.country,\n        coord : data.coord.lon +','+ data.coord.lat,\n        temp : data.main.temp,\n        description : data.weather[0].description,\n        error : '',\n\n   })\n  } else {\n    this.setState({\n      humidity :'' ,\n      country: '',\n      coord : '',\n      temp : '',\n      description : '',\n      error : 'please enter data !',\n\n })\n  }\n} \nrender(){ \n  return (\n    <div className=\"wrapper\">\n      <div className=\"form\">\n      <Form getWeather={this.getWeather}/>\n      <Weather\n       humidity={this.state.humidity}\n       country={this.state.country}\n       coord={this.state.coord}\n       temp={this.state.temp}\n       description={this.state.description}\n       error={this.state.error}\n        />\n    </div>\n     </div>\n  );\n} \n} \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n \nserviceWorker.unregister();\n"],"sourceRoot":""}